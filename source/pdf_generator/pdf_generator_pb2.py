# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pdf_generator.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x13pdf_generator.proto\"r\n\x0cpatient_data\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tlast_name\x18\x02 \x01(\t\x12\x0f\n\x07id_type\x18\x03 \x01(\t\x12\x0e\n\x06id_num\x18\x04 \x01(\t\x12\x0e\n\x06gender\x18\x05 \x01(\t\x12\x10\n\x08img_path\x18\x06 \x01(\t\" \n\rback_response\x12\x0f\n\x07message\x18\x01 \x01(\t2>\n\rPdf_generator\x12-\n\ncreate_pdf\x12\r.patient_data\x1a\x0e.back_response\"\x00\x62\x06proto3')



_PATIENT_DATA = DESCRIPTOR.message_types_by_name['patient_data']
_BACK_RESPONSE = DESCRIPTOR.message_types_by_name['back_response']
patient_data = _reflection.GeneratedProtocolMessageType('patient_data', (_message.Message,), {
  'DESCRIPTOR' : _PATIENT_DATA,
  '__module__' : 'pdf_generator_pb2'
  # @@protoc_insertion_point(class_scope:patient_data)
  })
_sym_db.RegisterMessage(patient_data)

back_response = _reflection.GeneratedProtocolMessageType('back_response', (_message.Message,), {
  'DESCRIPTOR' : _BACK_RESPONSE,
  '__module__' : 'pdf_generator_pb2'
  # @@protoc_insertion_point(class_scope:back_response)
  })
_sym_db.RegisterMessage(back_response)

_PDF_GENERATOR = DESCRIPTOR.services_by_name['Pdf_generator']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _PATIENT_DATA._serialized_start=23
  _PATIENT_DATA._serialized_end=137
  _BACK_RESPONSE._serialized_start=139
  _BACK_RESPONSE._serialized_end=171
  _PDF_GENERATOR._serialized_start=173
  _PDF_GENERATOR._serialized_end=235
# @@protoc_insertion_point(module_scope)
